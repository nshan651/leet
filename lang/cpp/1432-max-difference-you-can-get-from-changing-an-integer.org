#+title: 1432. Max Difference You Can Get From Changing an Integer
#+author: nshan651
#+options: tex:t toc:nil
#+startup: content indent inlineimages latexpreview

https://leetcode.com/problems/max-difference-you-can-get-from-changing-an-integer/

You are given an integer num. You will apply the following steps exactly two times:

    - Pick a digit x where  $$(0 <= x <= 9)$$
    - Pick another digit y where $$ (0 <= y <= 9) $$
      - The digit y can be equal to x.
    - Replace all the occurrences of x in the decimal representation of num by y.
    - The new integer cannot have any leading zeros, also the new integer cannot be 0.

Let a and b be the results of applying the operations to num the first and second times, respectively.

Return the max difference between a and b

* Examples
** Example 1:
#+begin_example
Input: num = 555
Output: 888
Explanation: The first time pick x = 5 and y = 9 and store the new integer in a.
The second time pick x = 5 and y = 1 and store the new integer in b.
We have now a = 999 and b = 111 and max difference = 888
#+end_example

** Example 2:
#+begin_example
Input: num = 9
Output: 8
Explanation: The first time pick x = 9 and y = 9 and store the new integer in a.
The second time pick x = 9 and y = 1 and store the new integer in b.
We have now a = 9 and b = 1 and max difference = 8
#+end_example

* Constraints:
    $$ 1 <= num <= 10^8 $$

*  Solution
To find the largest place value, we need to apply the following formula:

#+begin_src C++ :includes <iostream> :flags -I./src/util -std=c++20 :tangle src/1432-max-difference-you-can-get-from-changing-an-integer.cpp
  #include <limits.h>

  class Solution {
  public:
    int maxDiff(int num)
    {
      int a = INT_MIN, b = INT_MAX;
      std::string s = std::to_string(num);

      for (char x = '0'; x <= '9'; x++)
      {
        for (char y = '0'; y <= '9'; y++)
        {
          std::string newNum = s;
          for (char& c : newNum)
            if (c == x)
              c = y;

          // checking for leading zero
          if (newNum[0] == '0')
            continue;

          int newNumInt = stoi(newNum);
          a = std::max(a, newNumInt);
          b = std::min(b, newNumInt);
        }
      }

      return a - b;
    }
  };

  int main()
  {
    Solution s1;

    int num = 555;
    int res = s1.maxDiff(num);

    std::cout << res << std::endl;

    return 0;
  }
#+end_src

#+RESULTS:
: 888
